name: Docker Build, Push to Registry, Deploy to Dev

on:
  workflow_call:

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    environment:
      name: dev

    steps:
      - name: Debug info
        run: |
          echo "GitHub ref: ${{ github.ref }}"
          echo "Event name: ${{ github.event_name }}"
          env | sort

      - name: Checkout platform repository
        uses: actions/checkout@v4

      - name: Checkout infrastructure repository
        uses: actions/checkout@v4
        with:
          repository: openmeet-team/openmeet-infrastructure
          path: openmeet-infrastructure
          token: ${{ secrets.GH_PAT_INFRASTRUCTURE }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: openmeet-ecr/openmeet-platform
          IMAGE_TAG: ${{ github.sha }}
          GIT_REVISION: ${{ github.sha }}
          GIT_BRANCH: ${{ github.ref_name }}
        run: |-
          echo "Building image with tag: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

          APP_VERSION=$(node -p "require('./package.json').version")
          docker buildx build --load \
            --build-arg APP_VERSION="${APP_VERSION}" \
            --build-arg COMMIT_SHA="${GITHUB_SHA}" \
            -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" .

          # Also tag as latest for main branch
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # Push both tags
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.30.1'

      - name: Update kubeconfig and deploy to EKS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: openmeet-ecr/openmeet-platform
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws eks update-kubeconfig --name openmeet-dev --region ${{ vars.AWS_REGION }}

          # Apply the patch to the dev environment
          cd openmeet-infrastructure

          # First ensure namespace exists
          kubectl apply -f k8s/environments/dev/namespace.yaml --validate=false

          # Update the deployment with the new image
          kubectl set image deployment/openmeet-platform openmeet-platform=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -n dev

          # Update the infrastructure repository with the new image tag
          sed -i "s|image: .*openmeet-ecr/openmeet-platform:.*|image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|" k8s/environments/dev/kustomization.yaml

          # Configure Git
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

          # Commit and push the changes
          git add k8s/environments/dev/kustomization.yaml
          git commit -m "Update Platform image to $IMAGE_TAG from main branch"
          git push origin main

          # Wait for rollout to complete
          kubectl rollout status deployment/openmeet-platform -n dev
